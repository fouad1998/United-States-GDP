!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/dist/",e(e.s=25)}({21:function(t,n,e){var r=e(22),i=e(23);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);t.exports=i.locals||{}},22:function(t,n,e){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),u=[];function a(t){for(var n=-1,e=0;e<u.length;e++)if(u[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},r=[],i=0;i<t.length;i++){var o=t[i],s=n.base?o[0]+n.base:o[0],c=e[s]||0,l="".concat(s," ").concat(c);e[s]=c+1;var f=a(l),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(u[f].references++,u[f].updater(h)):u.push({identifier:l,updater:v(h,n),references:1}),r.push(l)}return r}function c(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=e.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var u=o(t.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(n)}return n}var l,f=(l=[],function(t,n){return l[t]=n,l.filter(Boolean).join("\n")});function h(t,n,e,r){var i=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(n,i);else{var o=document.createTextNode(i),u=t.childNodes;u[n]&&t.removeChild(u[n]),u.length?t.insertBefore(o,u[n]):t.appendChild(o)}}function p(t,n,e){var r=e.css,i=e.media,o=e.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var g=null,d=0;function v(t,n){var e,r,i;if(n.singleton){var o=d++;e=g||(g=c(n)),r=h.bind(null,e,o,!1),i=h.bind(null,e,o,!0)}else e=c(n),r=p.bind(null,e,n),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=i());var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var i=a(e[r]);u[i].references--}for(var o=s(t,n),c=0;c<e.length;c++){var l=a(e[c]);0===u[l].references&&(u[l].updater(),u.splice(l,1))}e=o}}}},23:function(t,n,e){(n=e(24)(!1)).push([t.i,"body{display:flex;justify-content:center;align-items:center}.bar{fill:#07a4ff}.bar:hover{fill:#fff}text{font-family:sans-serif;font-size:1.5em;font-weight:600}text#title{font-size:3em !important;font-weight:500;text-anchor:middle}#tooltip{position:fixed;width:250px;height:60px;padding:5px 0;z-index:5;background:#868584;box-shadow:0 0 5px rgba(0,0,0,0.548);text-align:center;font-size:1.25em;font-family:sans-serif}#tooltip strong{font-size:1.5em;display:inline-block;width:100%}\n",""]),t.exports=n},24:function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(u=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(s," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([i]).join("\n")}var u,a,s;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var a=0;a<t.length;a++){var s=[].concat(t[a]);r&&i[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),n.push(s))}},n}},25:function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=(o.left,u);var s=Array.prototype,c=(s.slice,s.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}),l=Math.sqrt(50),f=Math.sqrt(10),h=Math.sqrt(2),p=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=g(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function g(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=l?10:o>=f?5:o>=h?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=l?10:o>=f?5:o>=h?2:1)}function d(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=l?i*=10:o>=f?i*=5:o>=h&&(i*=2),n<t?-i:i}var v=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},y=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r};var m=Array.prototype.slice,_=function(t){return t};function w(t){return"translate("+(t+.5)+",0)"}function x(t){return"translate(0,"+(t+.5)+")"}function M(t){return function(n){return+t(n)}}function b(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function C(){return!this.__axis}function N(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,s=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",l=1===t||3===t?w:x;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):_:i,g=Math.max(o,0)+a,d=n.range(),v=+d[0]+.5,y=+d[d.length-1]+.5,m=(n.bandwidth?b:M)(n.copy()),w=f.selection?f.selection():f,x=w.selectAll(".domain").data([null]),N=w.selectAll(".tick").data(h,n).order(),A=N.exit(),T=N.enter().append("g").attr("class","tick"),k=N.select("line"),U=N.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),N=N.merge(T),k=k.merge(T.append("line").attr("stroke","currentColor").attr(c+"2",s*o)),U=U.merge(T.append("text").attr("fill","currentColor").attr(c,s*g).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==w&&(x=x.transition(f),N=N.transition(f),k=k.transition(f),U=U.transition(f),A=A.transition(f).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=m(t))?l(t):this.getAttribute("transform")})),T.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:m(t))}))),A.remove(),x.attr("d",4===t||2==t?u?"M"+s*u+","+v+"H0.5V"+y+"H"+s*u:"M0.5,"+v+"V"+y:u?"M"+v+","+s*u+"V0.5H"+y+"V"+s*u:"M"+v+",0.5H"+y),N.attr("opacity",1).attr("transform",(function(t){return l(m(t))})),k.attr(c+"2",s*o),U.attr(c,s*g).text(p),w.filter(C).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),w.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=m.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:m.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:m.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=u=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(u=+t,f):u},f.tickPadding=function(t){return arguments.length?(a=+t,f):a},f}var A={value:function(){}};function T(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new k(r)}function k(t){this._=t}function U(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function S(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function L(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=A,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}k.prototype=T.prototype={constructor:k,on:function(t,n){var e,r=this._,i=U(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=L(r[e],t.name,n);else if(null==n)for(e in r)r[e]=L(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=S(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new k(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var D=T;function R(){}var E=function(t){return null==t?R:function(){return this.querySelector(t)}};function P(){return[]}var F=function(t){return null==t?P:function(){return this.querySelectorAll(t)}},j=function(t){return function(){return this.matches(t)}},Y=function(t){return new Array(t.length)};function H(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}H.prototype={constructor:H,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function O(t,n,e,r,i,o){for(var u,a=0,s=n.length,c=o.length;a<c;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new H(t,o[a]);for(;a<s;++a)(u=n[a])&&(i[a]=u)}function q(t,n,e,r,i,o,u){var a,s,c,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(p[a]=c="$"+u.call(s,s.__data__,a,n),c in l?i[a]=s:l[c]=s);for(a=0;a<h;++a)(s=l[c="$"+u.call(t,o[a],a,o)])?(r[a]=s,s.__data__=o[a],l[c]=null):e[a]=new H(t,o[a]);for(a=0;a<f;++a)(s=n[a])&&l[p[a]]===s&&(i[a]=s)}function $(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var z="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:z,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},X=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),V.hasOwnProperty(n)?{space:V[n],local:t}:t};function I(t){return function(){this.removeAttribute(t)}}function B(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Z(t,n){return function(){this.setAttribute(t,n)}}function Q(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function J(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var G=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function K(t){return function(){this.style.removeProperty(t)}}function tt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function et(t,n){return t.style.getPropertyValue(n)||G(t).getComputedStyle(t,null).getPropertyValue(n)}function rt(t){return function(){delete this[t]}}function it(t,n){return function(){this[t]=n}}function ot(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function ut(t){return t.trim().split(/^|\s+/)}function at(t){return t.classList||new st(t)}function st(t){this._node=t,this._names=ut(t.getAttribute("class")||"")}function ct(t,n){for(var e=at(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function lt(t,n){for(var e=at(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ft(t){return function(){ct(this,t)}}function ht(t){return function(){lt(this,t)}}function pt(t,n){return function(){(n.apply(this,arguments)?ct:lt)(this,t)}}st.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function gt(){this.textContent=""}function dt(t){return function(){this.textContent=t}}function vt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function yt(){this.innerHTML=""}function mt(t){return function(){this.innerHTML=t}}function _t(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function wt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Mt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===z&&n.documentElement.namespaceURI===z?n.createElement(t):n.createElementNS(e,t)}}function bt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var Ct=function(t){var n=X(t);return(n.local?bt:Mt)(n)};function Nt(){return null}function At(){var t=this.parentNode;t&&t.removeChild(this)}function Tt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function kt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var Ut={},St=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Ut={mouseenter:"mouseover",mouseleave:"mouseout"}));function Lt(t,n,e){return t=Dt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Dt(t,n,e){return function(r){var i=St;St=r;try{t.call(this,this.__data__,n,e)}finally{St=i}}}function Rt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Et(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Pt(t,n,e){var r=Ut.hasOwnProperty(t.type)?Lt:Dt;return function(i,o,u){var a,s=this.__on,c=r(n,o,u);if(s)for(var l=0,f=s.length;l<f;++l)if((a=s[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(a):this.__on=[a]}}function Ft(t,n,e){var r=G(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function jt(t,n){return function(){return Ft(this,t,n)}}function Yt(t,n){return function(){return Ft(this,t,n.apply(this,arguments))}}var Ht=[null];function Ot(t,n){this._groups=t,this._parents=n}function qt(){return new Ot([[document.documentElement]],Ht)}Ot.prototype=qt.prototype={constructor:Ot,select:function(t){"function"!=typeof t&&(t=E(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],s=a.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),c[l]=u);return new Ot(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=F(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],s=a.length,c=0;c<s;++c)(u=a[c])&&(r.push(t.call(u,u.__data__,c,a)),i.push(u));return new Ot(r,i)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new Ot(r,this._parents)},data:function(t,n){if(!t)return g=new Array(this.size()),l=-1,this.each((function(t){g[++l]=t})),g;var e,r=n?q:O,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),s=new Array(u),c=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,g=t.call(f,f&&f.__data__,l,i),d=g.length,v=s[l]=new Array(d),y=a[l]=new Array(d);r(f,h,v,y,c[l]=new Array(p),g,n);for(var m,_,w=0,x=0;w<d;++w)if(m=v[w]){for(w>=x&&(x=w+1);!(_=y[x])&&++x<d;);m._next=_||null}}return(a=new Ot(a,i))._enter=s,a._exit=c,a},enter:function(){return new Ot(this._enter||this._groups.map(Y),this._parents)},exit:function(){return new Ot(this._exit||this._groups.map(Y),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],l=e[a],f=c.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new Ot(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=$);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],s=a.length,c=i[o]=new Array(s),l=0;l<s;++l)(u=a[l])&&(c[l]=u);c.sort(n)}return new Ot(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=X(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?B:I:"function"==typeof n?e.local?J:W:e.local?Q:Z)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?K:"function"==typeof n?nt:tt)(t,n,null==e?"":e)):et(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rt:"function"==typeof n?ot:it)(t,n)):this.node()[t]},classed:function(t,n){var e=ut(t+"");if(arguments.length<2){for(var r=at(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?pt:n?ft:ht)(e,n))},text:function(t){return arguments.length?this.each(null==t?gt:("function"==typeof t?vt:dt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yt:("function"==typeof t?_t:mt)(t)):this.node().innerHTML},raise:function(){return this.each(wt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:Ct(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Ct(t),r=null==n?Nt:"function"==typeof n?n:E(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(At)},clone:function(t){return this.select(t?kt:Tt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Rt(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Pt:Et,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var s,c=0,l=a.length;c<l;++c)for(r=0,s=a[c];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Yt:jt)(t,n))}};var $t=qt,zt=function(t){return"string"==typeof t?new Ot([[document.querySelector(t)]],[document.documentElement]):new Ot([[t]],Ht)};var Vt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Xt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function It(){}var Bt="\\s*([+-]?\\d+)\\s*",Zt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Qt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Wt=/^#([0-9a-f]{3,8})$/,Jt=new RegExp("^rgb\\("+[Bt,Bt,Bt]+"\\)$"),Gt=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),Kt=new RegExp("^rgba\\("+[Bt,Bt,Bt,Zt]+"\\)$"),tn=new RegExp("^rgba\\("+[Qt,Qt,Qt,Zt]+"\\)$"),nn=new RegExp("^hsl\\("+[Zt,Qt,Qt]+"\\)$"),en=new RegExp("^hsla\\("+[Zt,Qt,Qt,Zt]+"\\)$"),rn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function on(){return this.rgb().formatHex()}function un(){return this.rgb().formatRgb()}function an(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Wt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?sn(n):3===e?new hn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?cn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?cn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Jt.exec(t))?new hn(n[1],n[2],n[3],1):(n=Gt.exec(t))?new hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Kt.exec(t))?cn(n[1],n[2],n[3],n[4]):(n=tn.exec(t))?cn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=nn.exec(t))?vn(n[1],n[2]/100,n[3]/100,1):(n=en.exec(t))?vn(n[1],n[2]/100,n[3]/100,n[4]):rn.hasOwnProperty(t)?sn(rn[t]):"transparent"===t?new hn(NaN,NaN,NaN,0):null}function sn(t){return new hn(t>>16&255,t>>8&255,255&t,1)}function cn(t,n,e,r){return r<=0&&(t=n=e=NaN),new hn(t,n,e,r)}function ln(t){return t instanceof It||(t=an(t)),t?new hn((t=t.rgb()).r,t.g,t.b,t.opacity):new hn}function fn(t,n,e,r){return 1===arguments.length?ln(t):new hn(t,n,e,null==r?1:r)}function hn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function pn(){return"#"+dn(this.r)+dn(this.g)+dn(this.b)}function gn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function dn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function vn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new mn(t,n,e,r)}function yn(t){if(t instanceof mn)return new mn(t.h,t.s,t.l,t.opacity);if(t instanceof It||(t=an(t)),!t)return new mn;if(t instanceof mn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new mn(u,a,s,t.opacity)}function mn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function _n(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function wn(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}Vt(It,an,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:on,formatHex:on,formatHsl:function(){return yn(this).formatHsl()},formatRgb:un,toString:un}),Vt(hn,fn,Xt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new hn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new hn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:pn,formatHex:pn,formatRgb:gn,toString:gn})),Vt(mn,(function(t,n,e,r){return 1===arguments.length?yn(t):new mn(t,n,e,null==r?1:r)}),Xt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new mn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new mn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new hn(_n(t>=240?t-240:t+120,i,r),_n(t,i,r),_n(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var xn=function(t){return function(){return t}};function Mn(t,n){return function(e){return t+e*n}}function bn(t){return 1==(t=+t)?Cn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):xn(isNaN(n)?e:n)}}function Cn(t,n){var e=n-t;return e?Mn(t,e):xn(isNaN(t)?n:t)}var Nn=function t(n){var e=bn(n);function r(t,n){var r=e((t=fn(t)).r,(n=fn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=Cn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function An(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=fn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}An((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return wn((e-r/n)*n,u,i,o,a)}})),An((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return wn((e-r/n)*n,i,o,u,a)}}));var Tn=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function kn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Un(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Yn(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var Sn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},Ln=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Dn=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Yn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Rn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,En=new RegExp(Rn.source,"g");var Pn,Fn,jn=function(t,n){var e,r,i,o=Rn.lastIndex=En.lastIndex=0,u=-1,a=[],s=[];for(t+="",n+="";(e=Rn.exec(t))&&(r=En.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:Ln(e,r)})),o=En.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},Yn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?xn(n):("number"===r?Ln:"string"===r?(e=an(n))?(n=e,Nn):jn:n instanceof an?Nn:n instanceof Date?Sn:kn(n)?Tn:Array.isArray(n)?Un:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Dn:Ln)(t,n)},Hn=function(){for(var t,n=St;t=n.sourceEvent;)n=t;return n},On=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},qn=function(t){var n=Hn();return n.changedTouches&&(n=n.changedTouches[0]),On(t,n)},$n=0,zn=0,Vn=0,Xn=0,In=0,Bn=0,Zn="object"==typeof performance&&performance.now?performance:Date,Qn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Wn(){return In||(Qn(Jn),In=Zn.now()+Bn)}function Jn(){In=0}function Gn(){this._call=this._time=this._next=null}function Kn(t,n,e){var r=new Gn;return r.restart(t,n,e),r}function te(){In=(Xn=Zn.now())+Bn,$n=zn=0;try{!function(){Wn(),++$n;for(var t,n=Pn;n;)(t=In-n._time)>=0&&n._call.call(null,t),n=n._next;--$n}()}finally{$n=0,function(){var t,n,e=Pn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Pn=n);Fn=t,ee(r)}(),In=0}}function ne(){var t=Zn.now(),n=t-Xn;n>1e3&&(Bn-=n,Xn=t)}function ee(t){$n||(zn&&(zn=clearTimeout(zn)),t-In>24?(t<1/0&&(zn=setTimeout(te,t-Zn.now()-Bn)),Vn&&(Vn=clearInterval(Vn))):(Vn||(Xn=Zn.now(),Vn=setInterval(ne,1e3)),$n=1,Qn(te)))}Gn.prototype=Kn.prototype={constructor:Gn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Wn():+e)+(null==n?0:+n),this._next||Fn===this||(Fn?Fn._next=this:Pn=this,Fn=this),this._call=t,this._time=e,ee()},stop:function(){this._call&&(this._call=null,this._time=1/0,ee())}};var re=function(t,n,e){var r=new Gn;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},ie=D("start","end","cancel","interrupt"),oe=[],ue=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var c,l,f,h;if(1!==e.state)return a();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return re(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(re((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Kn((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:ie,tween:oe,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function ae(t,n){var e=ce(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function se(t,n){var e=ce(t,n);if(e.state>3)throw new Error("too late; already running");return e}function ce(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var le,fe,he,pe,ge=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},de=180/Math.PI,ve={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ye=function(t,n,e,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*de,skewX:Math.atan(s)*de,scaleX:u,scaleY:a}};function me(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],s=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,n,null,e);a.push({i:s-4,x:Ln(t,i)},{i:s-2,x:Ln(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ln(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ln(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,s),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Ln(t,e)},{i:a-2,x:Ln(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,s),o=u=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var _e=me((function(t){return"none"===t?ve:(le||(le=document.createElement("DIV"),fe=document.documentElement,he=document.defaultView),le.style.transform=t,t=he.getComputedStyle(fe.appendChild(le),null).getPropertyValue("transform"),fe.removeChild(le),t=t.slice(7,-1).split(","),ye(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),we=me((function(t){return null==t?ve:(pe||(pe=document.createElementNS("http://www.w3.org/2000/svg","g")),pe.setAttribute("transform",t),(t=pe.transform.baseVal.consolidate())?(t=t.matrix,ye(t.a,t.b,t.c,t.d,t.e,t.f)):ve)}),", ",")",")");function xe(t,n){var e,r;return function(){var i=se(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function Me(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=se(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=a;break}s===c&&i.push(a)}o.tween=i}}function be(t,n,e){var r=t._id;return t.each((function(){var t=se(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return ce(t,r).value[n]}}var Ce=function(t,n){var e;return("number"==typeof n?Ln:n instanceof an?Nn:(e=an(n))?(n=e,Nn):jn)(t,n)};function Ne(t){return function(){this.removeAttribute(t)}}function Ae(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Te(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function ke(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function Ue(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttribute(t))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttribute(t)}}function Se(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttributeNS(t.space,t.local)}}function Le(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function De(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Re(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&De(t,i)),e}return i._value=n,i}function Ee(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Le(t,i)),e}return i._value=n,i}function Pe(t,n){return function(){ae(this,t).delay=+n.apply(this,arguments)}}function Fe(t,n){return n=+n,function(){ae(this,t).delay=n}}function je(t,n){return function(){se(this,t).duration=+n.apply(this,arguments)}}function Ye(t,n){return n=+n,function(){se(this,t).duration=n}}function He(t,n){if("function"!=typeof n)throw new Error;return function(){se(this,t).ease=n}}function Oe(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ae:se;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var qe=$t.prototype.constructor;function $e(t){return function(){this.style.removeProperty(t)}}function ze(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Ve(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&ze(t,o,e)),r}return o._value=n,o}function Xe(t){return function(n){this.textContent=t.call(this,n)}}function Ie(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Xe(r)),n}return r._value=t,r}var Be=0;function Ze(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Qe(){return++Be}var We=$t.prototype;Ze.prototype=function(t){return $t().transition(t)}.prototype={constructor:Ze,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=E(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,c=r[u],l=c.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=c[h])&&(s=t.call(a,a.__data__,h,c))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,ue(f[h],n,e,h,f,ce(a,e)));return new Ze(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=F(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,c=r[a],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,p=t.call(s,s.__data__,f,c),g=ce(s,e),d=0,v=p.length;d<v;++d)(h=p[d])&&ue(h,n,e,d,p,g);o.push(p),u.push(s)}return new Ze(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new Ze(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],l=e[a],f=c.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new Ze(u,this._parents,this._name,this._id)},selection:function(){return new qe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Qe(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)if(u=a[c]){var l=ce(u,n);ue(u,t,e,c,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ze(r,this._parents,t,e)},call:We.call,nodes:We.nodes,node:We.node,size:We.size,empty:We.empty,each:We.each,on:function(t,n){var e=this._id;return arguments.length<2?ce(this.node(),e).on.on(t):this.each(Oe(e,t,n))},attr:function(t,n){var e=X(t),r="transform"===e?we:Ce;return this.attrTween(t,"function"==typeof n?(e.local?Se:Ue)(e,r,be(this,"attr."+t,n)):null==n?(e.local?Ae:Ne)(e):(e.local?ke:Te)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=X(t);return this.tween(e,(r.local?Re:Ee)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?_e:Ce;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=et(this,t),u=(this.style.removeProperty(t),et(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,$e(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=et(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=et(this,t)),u===s?null:u===r&&s===i?o:(i=s,o=n(r=u,a))}}(t,r,be(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var s=se(this,t),c=s.on,l=null==s.value[u]?o||(o=$e(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(a,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=et(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Ve(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(be(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Ie(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ce(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?xe:Me)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Pe:Fe)(n,t)):ce(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?je:Ye)(n,t)):ce(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(He(n,t)):ce(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},s={value:function(){0==--i&&o()}};e.each((function(){var e=se(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var Je={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ge(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Je.time=Wn(),Je;return e}$t.prototype.interrupt=function(t){return this.each((function(){ge(this,t)}))},$t.prototype.transition=function(t){var n,e;t instanceof Ze?(n=t._id,t=t._name):(n=Qe(),(e=Je).time=Wn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)(u=a[c])&&ue(u,t,n,c,a,e||Ge(u,n));return new Ze(r,this._parents,t,n)};function Ke(t){return[+t[0],+t[1]]}function tr(t){return[Ke(t[0]),Ke(t[1])]}["w","e"].map(nr),["n","s"].map(nr),["n","w","e","s","nw","ne","sw","se"].map(nr);function nr(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var er=Math.PI,rr=2*er,ir=rr-1e-6;function or(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ur(){return new or}or.prototype=ur.prototype={constructor:or,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,s=r-n,c=o-t,l=u-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*a-s*c)>1e-6&&i){var h=e-o,p=r-u,g=a*a+s*s,d=h*h+p*p,v=Math.sqrt(g),y=Math.sqrt(f),m=i*Math.tan((er-Math.acos((g+f-d)/(2*v*y)))/2),_=m/y,w=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*c)+","+(n+_*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+w*a)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+u,c=n+a,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%rr+rr),f>ir?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=er)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function ar(){}function sr(t,n){var e=new ar;if(t instanceof ar)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}ar.prototype=sr.prototype={constructor:ar,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var cr=sr;function lr(){}var fr=cr.prototype;function hr(t,n){var e=new lr;if(t instanceof lr)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}lr.prototype=hr.prototype={constructor:lr,has:fr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:fr.remove,clear:fr.clear,values:fr.keys,size:fr.size,empty:fr.empty,each:fr.each};Array.prototype.slice;var pr={},gr={};function dr(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function vr(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function yr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function mr(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+yr(-n,6):n>9999?"+"+yr(n,6):yr(n,4))+"-"+yr(t.getUTCMonth()+1,2)+"-"+yr(t.getUTCDate(),2)+(o?"T"+yr(e,2)+":"+yr(r,2)+":"+yr(i,2)+"."+yr(o,3)+"Z":i?"T"+yr(e,2)+":"+yr(r,2)+":"+yr(i,2)+"Z":r||e?"T"+yr(e,2)+":"+yr(r,2)+"Z":"")}var _r=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,s=o<=0,c=!1;function l(){if(s)return gr;if(c)return c=!1,pr;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?s=!0:10===(r=t.charCodeAt(u++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=l())!==gr;){for(var f=[];r!==pr&&r!==gr;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?mr(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=dr(t);return function(r,i){return n(e(r),i,t)}}(t,n):dr(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=vr(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=vr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}},wr=_r(","),xr=wr.parse,Mr=(wr.parseRows,wr.format,wr.formatBody,wr.formatRows,wr.formatRow,wr.formatValue,_r("\t")),br=Mr.parse;Mr.parseRows,Mr.format,Mr.formatBody,Mr.formatRows,Mr.formatRow,Mr.formatValue;function Cr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Nr=function(t,n){return fetch(t,n).then(Cr)};function Ar(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Nr(n,e).then((function(n){return t(n,r)}))}}Ar(xr),Ar(br);function Tr(t){return function(n,e){return Nr(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}Tr("application/xml"),Tr("text/html"),Tr("image/svg+xml");function kr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,s,c,l,f,h,p=t._root,g={data:r},d=t._x0,v=t._y0,y=t._x1,m=t._y1;if(!p)return t._root=g,t;for(;p.length;)if((c=n>=(o=(d+y)/2))?d=o:y=o,(l=e>=(u=(v+m)/2))?v=u:m=u,i=p,!(p=p[f=l<<1|c]))return i[f]=g,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return g.next=p,i?i[f]=g:t._root=g,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(o=(d+y)/2))?d=o:y=o,(l=e>=(u=(v+m)/2))?v=u:m=u}while((f=l<<1|c)==(h=(s>=u)<<1|a>=o));return i[h]=p,i[f]=g,t}var Ur=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Sr(t){return t[0]}function Lr(t){return t[1]}function Dr(t,n,e){var r=new Rr(null==n?Sr:n,null==e?Lr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Rr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Er(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Pr=Dr.prototype=Rr.prototype;Pr.copy=function(){var t,n,e=new Rr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Er(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Er(n));return e},Pr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return kr(this.cover(n,e),n,e,t)},Pr.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),e=0;e<o;++e)kr(this,u[e],a[e],t[e]);return this},Pr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,s=i-e,c=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=c,c=u,s*=2,a){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Pr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Pr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Pr.find=function(t,n,e){var r,i,o,u,a,s,c,l=this._x0,f=this._y0,h=this._x1,p=this._y1,g=[],d=this._root;for(d&&g.push(new Ur(d,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);s=g.pop();)if(!(!(d=s.node)||(i=s.x0)>h||(o=s.y0)>p||(u=s.x1)<l||(a=s.y1)<f))if(d.length){var v=(i+u)/2,y=(o+a)/2;g.push(new Ur(d[3],v,y,u,a),new Ur(d[2],i,y,v,a),new Ur(d[1],v,o,u,y),new Ur(d[0],i,o,v,y)),(c=(n>=y)<<1|t>=v)&&(s=g[g.length-1],g[g.length-1]=g[g.length-1-c],g[g.length-1-c]=s)}else{var m=t-+this._x.call(null,d.data),_=n-+this._y.call(null,d.data),w=m*m+_*_;if(w<e){var x=Math.sqrt(e=w);l=t-x,f=n-x,h=t+x,p=n+x,r=d.data}}return r},Pr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,s,c,l,f,h,p=this._root,g=this._x0,d=this._y0,v=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(a=(g+v)/2))?g=a:v=a,(l=u>=(s=(d+y)/2))?d=s:y=s,n=p,!(p=p[f=l<<1|c]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},Pr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Pr.root=function(){return this._root},Pr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Pr.visit=function(t){var n,e,r,i,o,u,a=[],s=this._root;for(s&&a.push(new Ur(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&s.length){var c=(r+o)/2,l=(i+u)/2;(e=s[3])&&a.push(new Ur(e,c,l,o,u)),(e=s[2])&&a.push(new Ur(e,r,l,c,u)),(e=s[1])&&a.push(new Ur(e,c,i,o,l)),(e=s[0])&&a.push(new Ur(e,r,i,c,l))}return this},Pr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Ur(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,s=n.x1,c=n.y1,l=(u+s)/2,f=(a+c)/2;(o=i[0])&&e.push(new Ur(o,u,a,l,f)),(o=i[1])&&e.push(new Ur(o,l,a,s,f)),(o=i[2])&&e.push(new Ur(o,u,f,l,c)),(o=i[3])&&e.push(new Ur(o,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Pr.x=function(t){return arguments.length?(this._x=t,this):this._x},Pr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Fr=function(){return Math.random()},jr=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Fr),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Fr)),Yr=(function t(n){function e(){var t=jr.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Fr),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Fr));(function t(n){function e(t){var e=Yr.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Fr),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Fr);function Hr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Or=Array.prototype,qr=Or.map,$r=Or.slice,zr={name:"implicit"};function Vr(){var t=cr(),n=[],e=[],r=zr;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==zr)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=cr();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=$r.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Vr(n,e).unknown(r)},Hr.apply(i,arguments),i}function Xr(){var t,n,e=Vr().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,s=0,l=.5;function f(){var e=r().length,f=o[1]<o[0],h=o[f-0],p=o[1-f];t=(p-h)/Math.max(1,e-a+2*s),u&&(t=Math.floor(t)),h+=(p-h-t*(e-a))*l,n=t*(1-a),u&&(h=Math.round(h),n=Math.round(n));var g=c(e).map((function(n){return h+t*n}));return i(f?g.reverse():g)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),f()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,f()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,f()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,s=+t),f()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),f()):a},e.paddingOuter=function(t){return arguments.length?(s=+t,f()):s},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},e.copy=function(){return Xr(r(),o).round(u).paddingInner(a).paddingOuter(s).align(l)},Hr.apply(f(),arguments)}var Ir=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Br=function(t){return+t},Zr=[0,1];function Qr(t){return t}function Wr(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Jr(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Gr(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Wr(i,r),o=e(u,o)):(r=Wr(r,i),o=e(o,u)),function(t){return o(r(t))}}function Kr(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Wr(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=a(t,n,1,r)-1;return o[e](i[e](n))}}function ti(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ni(){var t,n,e,r,i,o,u=Zr,a=Zr,s=Yn,c=Qr;function l(){return r=Math.min(u.length,a.length)>2?Kr:Gr,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,s)))(t(c(n)))}return f.invert=function(e){return c(n((o||(o=r(a,u.map(t),Ln)))(e)))},f.domain=function(t){return arguments.length?(u=qr.call(t,Br),c===Qr||(c=Jr(u)),l()):u.slice()},f.range=function(t){return arguments.length?(a=$r.call(t),l()):a.slice()},f.rangeRound=function(t){return a=$r.call(t),s=Ir,l()},f.clamp=function(t){return arguments.length?(c=t?Jr(u):Qr,f):c!==Qr},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function ei(t,n){return ni()(t,n)}var ri=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ii(t){if(!(n=ri.exec(t)))throw new Error("invalid format: "+t);var n;return new oi({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function oi(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ii.prototype=oi.prototype,oi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ui,ai,si,ci,li=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},fi=function(t){return(t=li(Math.abs(t)))?t[1]:NaN},hi=function(t,n){var e=li(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},pi={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return hi(100*t,n)},r:hi,s:function(t,n){var e=li(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ui=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+li(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},gi=function(t){return t},di=Array.prototype.map,vi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ai=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?gi:(n=di.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?gi:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(di.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ii(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,d=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(d=!0,m="g"):pi[m]||(void 0===v&&(v=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?o:/[%p]/.test(m)?s:"",x=pi[m],M=/[defgprs%]/.test(m);function b(t){var i,o,s,h=_,b=w;if("c"===m)b=x(t)+b,t="";else{var C=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:x(Math.abs(t),v),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),C&&0==+t&&"+"!==f&&(C=!1),h=(C?"("===f?f:c:"-"===f||"("===f?"":f)+h,b=("s"===m?vi[8+ui/3]:"")+b+(C&&"("===f?")":""),M)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?u+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}d&&!p&&(t=r(t,1/0));var N=h.length+t.length+b.length,A=N<g?new Array(g-N+1).join(n):"";switch(d&&p&&(t=r(A+t,A.length?g-b.length:1/0),A=""),e){case"<":t=h+t+b+A;break;case"=":t=h+A+t+b;break;case"^":t=A.slice(0,N=A.length>>1)+h+t+b+A.slice(N);break;default:t=A+h+t+b}return a(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),b.toString=function(){return t+""},b}return{format:f,formatPrefix:function(t,n){var e=f(((t=ii(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(fi(n)/3))),i=Math.pow(10,-r),o=vi[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),si=ai.format,ci=ai.formatPrefix;var yi=function(t,n,e,r){var i,o=d(t,n,e);switch((r=ii(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(fi(n)/3)))-fi(Math.abs(t)))}(o,u))||(r.precision=i),ci(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,fi(n)-fi(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-fi(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return si(r)};function mi(t){var n=t.domain;return t.ticks=function(t){var e=n();return p(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return yi(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],s=i[u];return s<a&&(r=a,a=s,s=r,r=o,o=u,u=r),(r=g(a,s,e))>0?r=g(a=Math.floor(a/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=g(a=Math.ceil(a*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(s*r)/r,n(i)),t},t}function _i(){var t=ei(Qr,Qr);return t.copy=function(){return ti(t,_i())},Hr.apply(t,arguments),mi(t)}var wi=new Date,xi=new Date;function Mi(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Mi((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return wi.setTime(+n),xi.setTime(+r),t(wi),t(xi),Math.floor(e(wi,xi))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var bi=Mi((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));bi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mi((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Ci=bi,Ni=(bi.range,Mi((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));Ni.range;function Ai(t){return Mi((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Ti=Ai(0),ki=Ai(1),Ui=Ai(2),Si=Ai(3),Li=Ai(4),Di=Ai(5),Ri=Ai(6),Ei=(Ti.range,ki.range,Ui.range,Si.range,Li.range,Di.range,Ri.range,Mi((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Pi=Ei,Fi=(Ei.range,Mi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),ji=(Fi.range,Mi((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Yi=(ji.range,Mi((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Hi=(Yi.range,Mi((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Hi.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Mi((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Hi:null};Hi.range;function Oi(t){return Mi((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var qi=Oi(0),$i=Oi(1),zi=Oi(2),Vi=Oi(3),Xi=Oi(4),Ii=Oi(5),Bi=Oi(6),Zi=(qi.range,$i.range,zi.range,Vi.range,Xi.range,Ii.range,Bi.range,Mi((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Qi=Zi,Wi=(Zi.range,Mi((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Wi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mi((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Ji=Wi;Wi.range;function Gi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ki(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function to(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var no,eo={"-":"",_:" ",0:"0"},ro=/^\s*\d+/,io=/^%/,oo=/[\\^$*+?|[\]().{}]/g;function uo(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ao(t){return t.replace(oo,"\\$&")}function so(t){return new RegExp("^(?:"+t.map(ao).join("|")+")","i")}function co(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function lo(t,n,e){var r=ro.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function fo(t,n,e){var r=ro.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ho(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function po(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function go(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function vo(t,n,e){var r=ro.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function yo(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function mo(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function _o(t,n,e){var r=ro.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function wo(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function xo(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Mo(t,n,e){var r=ro.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function bo(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Co(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function No(t,n,e){var r=ro.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ao(t,n,e){var r=ro.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function To(t,n,e){var r=ro.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function ko(t,n,e){var r=io.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Uo(t,n,e){var r=ro.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function So(t,n,e){var r=ro.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Lo(t,n){return uo(t.getDate(),n,2)}function Do(t,n){return uo(t.getHours(),n,2)}function Ro(t,n){return uo(t.getHours()%12||12,n,2)}function Eo(t,n){return uo(1+Pi.count(Ci(t),t),n,3)}function Po(t,n){return uo(t.getMilliseconds(),n,3)}function Fo(t,n){return Po(t,n)+"000"}function jo(t,n){return uo(t.getMonth()+1,n,2)}function Yo(t,n){return uo(t.getMinutes(),n,2)}function Ho(t,n){return uo(t.getSeconds(),n,2)}function Oo(t){var n=t.getDay();return 0===n?7:n}function qo(t,n){return uo(Ti.count(Ci(t)-1,t),n,2)}function $o(t,n){var e=t.getDay();return t=e>=4||0===e?Li(t):Li.ceil(t),uo(Li.count(Ci(t),t)+(4===Ci(t).getDay()),n,2)}function zo(t){return t.getDay()}function Vo(t,n){return uo(ki.count(Ci(t)-1,t),n,2)}function Xo(t,n){return uo(t.getFullYear()%100,n,2)}function Io(t,n){return uo(t.getFullYear()%1e4,n,4)}function Bo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+uo(n/60|0,"0",2)+uo(n%60,"0",2)}function Zo(t,n){return uo(t.getUTCDate(),n,2)}function Qo(t,n){return uo(t.getUTCHours(),n,2)}function Wo(t,n){return uo(t.getUTCHours()%12||12,n,2)}function Jo(t,n){return uo(1+Qi.count(Ji(t),t),n,3)}function Go(t,n){return uo(t.getUTCMilliseconds(),n,3)}function Ko(t,n){return Go(t,n)+"000"}function tu(t,n){return uo(t.getUTCMonth()+1,n,2)}function nu(t,n){return uo(t.getUTCMinutes(),n,2)}function eu(t,n){return uo(t.getUTCSeconds(),n,2)}function ru(t){var n=t.getUTCDay();return 0===n?7:n}function iu(t,n){return uo(qi.count(Ji(t)-1,t),n,2)}function ou(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Xi(t):Xi.ceil(t),uo(Xi.count(Ji(t),t)+(4===Ji(t).getUTCDay()),n,2)}function uu(t){return t.getUTCDay()}function au(t,n){return uo($i.count(Ji(t)-1,t),n,2)}function su(t,n){return uo(t.getUTCFullYear()%100,n,2)}function cu(t,n){return uo(t.getUTCFullYear()%1e4,n,4)}function lu(){return"+0000"}function fu(){return"%"}function hu(t){return+t}function pu(t){return Math.floor(+t/1e3)}!function(t){no=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,s=t.shortMonths,c=so(i),l=co(i),f=so(o),h=co(o),p=so(u),g=co(u),d=so(a),v=co(a),y=so(s),m=co(s),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Lo,e:Lo,f:Fo,H:Do,I:Ro,j:Eo,L:Po,m:jo,M:Yo,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:hu,s:pu,S:Ho,u:Oo,U:qo,V:$o,w:zo,W:Vo,x:null,X:null,y:Xo,Y:Io,Z:Bo,"%":fu},w={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Zo,e:Zo,f:Ko,H:Qo,I:Wo,j:Jo,L:Go,m:tu,M:nu,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:hu,s:pu,S:eu,u:ru,U:iu,V:ou,w:uu,W:au,x:null,X:null,y:su,Y:cu,Z:lu,"%":fu},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=g[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return C(t,n,e,r)},d:xo,e:xo,f:To,H:bo,I:bo,j:Mo,L:Ao,m:wo,M:Co,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},q:_o,Q:Uo,s:So,S:No,u:fo,U:ho,V:po,w:lo,W:go,x:function(t,n,r){return C(t,e,n,r)},X:function(t,n,e){return C(t,r,n,e)},y:yo,Y:vo,Z:mo,"%":ko};function M(t,n){return function(e){var r,i,o,u=[],a=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=eo[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function b(t,n){return function(e){var r,i,o=to(1900,void 0,1);if(C(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ki(to(o.y,0,1))).getUTCDay(),r=i>4||0===i?$i.ceil(r):$i(r),r=Qi.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Gi(to(o.y,0,1))).getDay(),r=i>4||0===i?ki.ceil(r):ki(r),r=Pi.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ki(to(o.y,0,1)).getUTCDay():Gi(to(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ki(o)):Gi(o)}}function C(t,n,e,r){for(var i,o,u=0,a=n.length,s=e.length;u<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in eo?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=M(e,_),_.X=M(r,_),_.c=M(n,_),w.x=M(e,w),w.X=M(r,w),w.c=M(n,w),{format:function(t){var n=M(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=b(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=M(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=b(t+="",!0);return n.toString=function(){return t},n}}}(t),no.format,no.parse,no.utcFormat,no.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var gu=Mi((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),du=(gu.range,Mi((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),vu=(du.range,Mi((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));vu.range;function yu(){this._=null}function mu(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function _u(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function wu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function xu(t){for(;t.L;)t=t.L;return t}yu.prototype={constructor:yu,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=xu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(_u(this,e),e=(t=e).U),e.C=!1,r.C=!0,wu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(wu(this,e),e=(t=e).U),e.C=!1,r.C=!0,_u(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?xu(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,_u(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,wu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,_u(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,wu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,_u(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,wu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Mu=yu;function bu(t,n,e,r){var i=[null,null],o=Bu.push(i)-1;return i.left=t,i.right=n,e&&Nu(i,t,n,e),r&&Nu(i,n,t,r),Xu[t.index].halfedges.push(o),Xu[n.index].halfedges.push(o),i}function Cu(t,n,e){var r=[n,e];return r.left=t,r}function Nu(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Au(t,n,e,r,i){var o,u=t[0],a=t[1],s=u[0],c=u[1],l=0,f=1,h=a[0]-s,p=a[1]-c;if(o=n-s,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=e-c,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>l&&(l=o)}if(o=i-c,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*p]),f<1&&(t[1]=[s+f*h,c+f*p]),!0)}}}}}function Tu(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],p=l[0],g=l[1],d=(f+p)/2,v=(h+g)/2;if(g===h){if(d<n||d>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[d,e];o=[d,i]}else{if(s){if(s[1]<e)return}else s=[d,i];o=[d,e]}}else if(a=v-(u=(f-p)/(g-h))*d,u<-1||u>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<g){if(s){if(s[0]>=r)return}else s=[n,u*n+a];o=[r,u*r+a]}else{if(s){if(s[0]<n)return}else s=[r,u*r+a];o=[n,u*n+a]}return t[0]=s,t[1]=o,!0}function ku(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Uu(t,n){return n[+(n.left!==t.site)]}function Su(t,n){return n[+(n.left===t.site)]}var Lu,Du=[];function Ru(){mu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Eu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,c=r[1]-a,l=o[0]-u,f=o[1]-a,h=2*(s*f-c*l);if(!(h>=-Qu)){var p=s*s+c*c,g=l*l+f*f,d=(f*p-c*g)/h,v=(s*g-l*p)/h,y=Du.pop()||new Ru;y.arc=t,y.site=i,y.x=d+u,y.y=(y.cy=v+a)+Math.sqrt(d*d+v*v),t.circle=y;for(var m=null,_=Iu._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){m=_.P;break}_=_.L}else{if(!_.R){m=_;break}_=_.R}Iu.insert(m,y),m||(Lu=y)}}}}function Pu(t){var n=t.circle;n&&(n.P||(Lu=n.N),Iu.remove(n),Du.push(n),mu(n),t.circle=null)}var Fu=[];function ju(){mu(this),this.edge=this.site=this.circle=null}function Yu(t){var n=Fu.pop()||new ju;return n.site=t,n}function Hu(t){Pu(t),Vu.remove(t),Fu.push(t),mu(t)}function Ou(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];Hu(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Zu&&Math.abs(r-s.circle.cy)<Zu;)o=s.P,a.unshift(s),Hu(s),s=o;a.unshift(s),Pu(s);for(var c=u;c.circle&&Math.abs(e-c.circle.x)<Zu&&Math.abs(r-c.circle.cy)<Zu;)u=c.N,a.push(c),Hu(c),c=u;a.push(c),Pu(c);var l,f=a.length;for(l=1;l<f;++l)c=a[l],s=a[l-1],Nu(c.edge,s.site,c.site,i);s=a[0],(c=a[f-1]).edge=bu(s.site,c.site,null,i),Eu(s),Eu(c)}function qu(t){for(var n,e,r,i,o=t[0],u=t[1],a=Vu._;a;)if((r=$u(a,u)-o)>Zu)a=a.L;else{if(!((i=o-zu(a,u))>Zu)){r>-Zu?(n=a.P,e=a):i>-Zu?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Xu[t.index]={site:t,halfedges:[]}}(t);var s=Yu(t);if(Vu.insert(n,s),n||e){if(n===e)return Pu(n),e=Yu(n.site),Vu.insert(s,e),s.edge=e.edge=bu(n.site,s.site),Eu(n),void Eu(e);if(e){Pu(n),Pu(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,p=t[1]-f,g=e.site,d=g[0]-l,v=g[1]-f,y=2*(h*v-p*d),m=h*h+p*p,_=d*d+v*v,w=[(v*m-p*_)/y+l,(h*_-d*m)/y+f];Nu(e.edge,c,g,w),s.edge=bu(c,t,null,w),e.edge=bu(t,g,null,w),Eu(n),Eu(e)}else s.edge=bu(n.site,s.site)}}function $u(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],s=e[1],c=s-n;if(!c)return a;var l=a-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+a)/2}function zu(t,n){var e=t.N;if(e)return $u(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Vu,Xu,Iu,Bu,Zu=1e-6,Qu=1e-12;function Wu(t,n){return n[1]-t[1]||n[0]-t[0]}function Ju(t,n){var e,r,i,o=t.sort(Wu).pop();for(Bu=[],Xu=new Array(t.length),Vu=new Mu,Iu=new Mu;;)if(i=Lu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(qu(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Ou(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Xu.length;i<o;++i)if((t=Xu[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=ku(t,Bu[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,o=Bu.length;o--;)Tu(i=Bu[o],t,n,e,r)&&Au(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Zu||Math.abs(i[0][1]-i[1][1])>Zu)||delete Bu[o]}(u,a,s,c),function(t,n,e,r){var i,o,u,a,s,c,l,f,h,p,g,d,v=Xu.length,y=!0;for(i=0;i<v;++i)if(o=Xu[i]){for(u=o.site,a=(s=o.halfedges).length;a--;)Bu[s[a]]||s.splice(a,1);for(a=0,c=s.length;a<c;)g=(p=Su(o,Bu[s[a]]))[0],d=p[1],f=(l=Uu(o,Bu[s[++a%c]]))[0],h=l[1],(Math.abs(g-f)>Zu||Math.abs(d-h)>Zu)&&(s.splice(a,0,Bu.push(Cu(u,p,Math.abs(g-t)<Zu&&r-d>Zu?[t,Math.abs(f-t)<Zu?h:r]:Math.abs(d-r)<Zu&&e-g>Zu?[Math.abs(h-r)<Zu?f:e,r]:Math.abs(g-e)<Zu&&d-n>Zu?[e,Math.abs(f-e)<Zu?h:n]:Math.abs(d-n)<Zu&&g-t>Zu?[Math.abs(h-n)<Zu?f:t,n]:null))-1),++c);c&&(y=!1)}if(y){var m,_,w,x=1/0;for(i=0,y=null;i<v;++i)(o=Xu[i])&&(w=(m=(u=o.site)[0]-t)*m+(_=u[1]-n)*_)<x&&(x=w,y=o);if(y){var M=[t,n],b=[t,r],C=[e,r],N=[e,n];y.halfedges.push(Bu.push(Cu(u=y.site,M,b))-1,Bu.push(Cu(u,b,C))-1,Bu.push(Cu(u,C,N))-1,Bu.push(Cu(u,N,M))-1)}}for(i=0;i<v;++i)(o=Xu[i])&&(o.halfedges.length||delete Xu[i])}(u,a,s,c)}this.edges=Bu,this.cells=Xu,Vu=Iu=Bu=Xu=null}Ju.prototype={constructor:Ju,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Uu(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,s,c,l=e.site,f=-1,h=n[i[o-1]],p=h.left===l?h.right:h.left;++f<o;)u=p,p=(h=n[i[f]]).left===l?h.right:h.left,u&&p&&r<u.index&&r<p.index&&(s=u,c=p,((a=l)[0]-c[0])*(s[1]-a[1])-(a[0]-s[0])*(c[1]-a[1])<0)&&t.push([l.data,u.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],c=n-a[1],f=s*s+c*c;f<l&&(l=f,u=a.index)}}))}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}};Math.SQRT2;function Gu(t,n,e){this.k=t,this.x=n,this.y=e}Gu.prototype={constructor:Gu,scale:function(t){return 1===t?this:new Gu(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Gu(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Gu(1,0,0);Gu.prototype;e(21);function Ku(t){const n=zt("#root").attr("width",768).attr("height",512).attr("margin","80px 0"),e=t.data.map(t=>[t[0],+t[1]]),r=v(e,t=>t[1]),i=20,o=80,u=512-i-20,a=768-o-20,s=t=>t[0],c=t=>+t[1],l=Xr().domain(e.map(s)).range([0,a]).padding(.1),f=_i().domain([0,r]).range([0,u]).nice();!function(){const t=y(e,t=>+t[0].split("-")[0]),s=v(e,t=>+t[0].split("-")[0])+.75,c=_i().domain([t,s]).range([0,a]),l=(f=c,N(3,f)).tickFormat(t=>t%5==0?t:"");var f;n.append("g").attr("transform",`translate(${o}, ${u+i})`).attr("id","x-axis").call(l);const h=function(t){return N(4,t)}(_i().domain([0,r]).range([u,0]).nice()),p=n.append("g").attr("transform",`translate(${o}, ${i} )`).attr("id","y-axis");p.append("text").attr("x",-137).attr("y",22).style("transform","rotate(-90deg)").attr("fill","black").text("Gross Domestic Product"),p.call(h)}(),function(){const t=zt("body").append("div");t.style("display","none").attr("id","tooltip").style("position","fixed"),n.append("g").attr("transform",`translate(${o}, ${i})`).selectAll("rect").data(e).enter().append("rect").attr("x",t=>l(s(t))).attr("y",t=>u-f(c(t))).attr("height",t=>f(c(t))).attr("width",l.bandwidth()).attr("class","bar").attr("data-date",t=>s(t)).attr("data-gdp",t=>c(t)).on("mouseover",(function(){t.style("display","block")})).on("mouseout",(function(){t.style("display","none")})).on("mousemove",(function(){const e=qn(this)[0];console.log(n.position().left,e);const r=e+300<=768?e+n.position().left+100:e+n.position().left-200,i=qn(this)[1];t.attr("data-date",this.getAttribute("data-date")).style("left",r+"px").style("top",i+"px").html(`<strong>${function(t){const n=t.split("-").map(t=>+t),e=n[1]>=1&&n[1]<=3?"Q1":n[1]>=4&&n[1]<=6?"Q2":n[1]>=7&&n[1]<=9?"Q3":"Q4";return`${n[0]} ${e}`}(this.getAttribute("data-date"))}</strong><br>${this.getAttribute("data-gdp")} Billion`)}))}(),n.append("text").attr("fill","black").attr("x",384).attr("y",2*i).attr("id","title").text("United States GDP")}$t.prototype.position=function(){var t=this.node(),n=t.getBoundingClientRect(),e=function t(n){if("svg"===n.tagName)return n.parentElement.getBoundingClientRect();if("svg"===n.parentElement.tagName)return n.parentElement.getBoundingClientRect();return t(n.parentElement)}(t);return{top:n.top-e.top,left:n.left-e.left,width:n.width,bottom:n.bottom-e.top,height:n.height,right:n.right-e.left}},fetch("https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json").then(t=>t.json()).then(t=>Ku(t))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,